/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HousingAdmin;

import Business.Housing.Housing;
import Business.Housing.HousingDirectory;
import Business.Organization.HousingOrganization;
import Business.Organization.Organization;
import Business.Organization.HousingOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HousingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sweta Chowdhury
 */
public class AllocateShelterJPanel extends javax.swing.JPanel {

    private UserAccount userAccount;
    private JPanel userProcessContainer;
    private HousingOrganization housingOrganization;

    /**
     * Creates new form ManageOrganizationJPanel
     */
    public AllocateShelterJPanel(JPanel userProcessContainer, UserAccount userAccount, HousingOrganization organization) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.housingOrganization = organization;
        populateTable();
        populateCombo();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) housingJTable.getModel();
        model.setRowCount(0);

//        for(WorkRequest request: userAccount.getWorkQueue().getWorkRequestList()) {
//            if(request instanceof HousingWorkRequest){
//                Object[] row = new Object[model.getColumnCount()];
//                row[0] = ((HousingWorkRequest) request).getNoOfPeople();
//                row[1] = request.getMessage();
//                row[2] =  request.getSender();
//                row[3] =  request.getReceiver();
//                row[4] = request.getStatus();
//                row[5] = request.getRequestDate();
//                model.addRow(row);
//            }
//        }
        for (WorkRequest request : housingOrganization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof HousingWorkRequest) {
                Object[] row = new Object[model.getColumnCount()];
                row[0] = ((HousingWorkRequest) request).getNoOfPeople();
                row[1] = request.getMessage();
                row[2] = request.getSender();
                row[3] = request.getReceiver();
                row[4] = request.getStatus();
                row[5] = request.getRequestDate();
                row[6] = request;
                model.addRow(row);
            }
        }

    }

    public void populateCombo() {
        shelterNamesJComboBox.removeAllItems();
        int i = 0;
        for (Housing housing : housingOrganization.getHousingDirectory().getHousingList()) {
            shelterNamesJComboBox.addItem(housing);
            if (i == 0) {
                availableHouses.setText("Available Occupancy for " + (Integer.parseInt(housing.getHouseCapacity()) < 0 ? "0" : housing.getHouseCapacity()));
                i++;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        housingJTable = new javax.swing.JTable();
        availableHouses = new javax.swing.JLabel();
        shelterNamesJComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 253, 208));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("ALLOCATE HOUSING WORKAREA");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, -1, 41));

        addJButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addJButton.setText("ALLOCATE HOUSING");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        add(addJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 250, 40));

        backJButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/images/arrow-back-icon_1_40x40.png"))); // NOI18N
        backJButton.setContentAreaFilled(false);
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 50, 50));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Housing Organization : ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 310, 170, 40));

        housingJTable.setBackground(new java.awt.Color(214, 217, 224));
        housingJTable.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        housingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number of people", "Message", "Sender", "Receiver", "Status", "Requested Date", "Request Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(housingJTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 980, 160));

        availableHouses.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        add(availableHouses, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 310, 270, 40));

        shelterNamesJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shelterNamesJComboBoxActionPerformed(evt);
            }
        });
        add(shelterNamesJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, 210, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        Housing house = (Housing) shelterNamesJComboBox.getSelectedItem();
        int occupancy = (Integer.parseInt(house.getHouseCapacity()));
        int required;
        if (housingJTable.getSelectedRow() >= 0) {
            if (!housingJTable.getValueAt(housingJTable.getSelectedRow(), 4).toString().equals("Approved")) {
                System.out.println("------Housing Request--------------");
                WorkRequest req = (HousingWorkRequest) housingJTable.getValueAt(housingJTable.getSelectedRow(), 6);
                required = Integer.parseInt((String) housingJTable.getValueAt(housingJTable.getSelectedRow(), 0));
                house.setHouseCapacity(Integer.toString(occupancy - required));
                req.setStatus("Approved");
                System.out.println("Request Status" + req.getStatus());
                req.setResolveDate(new Date());
                req.setSender(userAccount);
                System.out.println("Approved On" + req.getStatus());
                populateTable();
                availableHouses.setText("Available Occupancy for " + (Integer.parseInt(house.getHouseCapacity()) < 0 ? "0" : house.getHouseCapacity()));
            }
            else {
               JOptionPane.showMessageDialog(this, "Allocation has been approved"); 
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a request");
        }

    }//GEN-LAST:event_addJButtonActionPerformed

    private void shelterNamesJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shelterNamesJComboBoxActionPerformed
        Housing house = (Housing) shelterNamesJComboBox.getSelectedItem();

        if (house != null) {
            availableHouses.setText("Available Occupancy for " + (Integer.parseInt(house.getHouseCapacity()) < 0 ? "0" : house.getHouseCapacity()));
        }
    }//GEN-LAST:event_shelterNamesJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JLabel availableHouses;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable housingJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox shelterNamesJComboBox;
    // End of variables declaration//GEN-END:variables
}
