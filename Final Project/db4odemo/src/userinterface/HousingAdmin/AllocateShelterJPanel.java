/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HousingAdmin;
import Business.Housing.Housing;
import Business.Housing.HousingDirectory;
import Business.Organization.HousingOrganization;
import Business.Organization.Organization;
import Business.Organization.HousingOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HousingWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sweta Chowdhury
 */
public class AllocateShelterJPanel extends javax.swing.JPanel {

    private UserAccount userAccount;
    private JPanel userProcessContainer;
    private HousingOrganization housingOrganization;
    
    /**
     * Creates new form ManageOrganizationJPanel
     */
    public AllocateShelterJPanel(JPanel userProcessContainer,UserAccount userAccount, HousingOrganization organization) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.housingOrganization = organization;
        
        populateCombo();
    }

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) housingJTable.getModel();
        model.setRowCount(0);

        for(WorkRequest request: userAccount.getWorkQueue().getWorkRequestList()) {
            if(request instanceof HousingWorkRequest){
                Object[] row = new Object[model.getColumnCount()];
                row[0] = ((HousingWorkRequest) request).getNoOfPeople();
                row[1] = request.getMessage();
                row[2] =  request.getSender();
                row[3] =  request.getReceiver();
                row[4] = request.getStatus();
                row[5] = request.getRequestDate();
                model.addRow(row);
            }
        }
    }
    
    public void populateCombo() {
        shelterNamesJComboBox.removeAllItems();
        int i = 0;
        for(Housing housing : housingOrganization.getHousingDirectory().getHousingList()) {
            shelterNamesJComboBox.addItem(housing);
            if(i == 0){
                availableHouses.setText("Available Houses "+housing.getHouseCapacity());
                i++;
            }
        }        
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        housingJTable = new javax.swing.JTable();
        availableHouses = new javax.swing.JLabel();
        shelterNamesJComboBox = new javax.swing.JComboBox();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setText("ALLOCATE HOUSING WORKAREA");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, -1, 41));

        addJButton.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addJButton.setText("ALLOCATE HOUSING");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        add(addJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 250, 40));

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton.setText("<<BACK");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 170, 40));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Housing Organization : ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 310, 200, 40));

        housingJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Number of people", "Message", "Sender", "Receiver", "Status", "Requested Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(housingJTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 710, 160));
        add(availableHouses, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 310, 130, 30));

        shelterNamesJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        shelterNamesJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shelterNamesJComboBoxActionPerformed(evt);
            }
        });
        add(shelterNamesJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 310, 210, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed

        /*OrganizationType type = (OrganizationType) shelterStatusJComboBox.getSelectedItem();
        directory.createOrganization(type);
        populateTable();*/
    }//GEN-LAST:event_addJButtonActionPerformed

    private void shelterNamesJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shelterNamesJComboBoxActionPerformed
        Housing house = (Housing) shelterNamesJComboBox.getSelectedItem();
        
        if (house!=null) {
            availableHouses.setText("Available Houses "+house.getHouseCapacity());
        }
    }//GEN-LAST:event_shelterNamesJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JLabel availableHouses;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable housingJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox shelterNamesJComboBox;
    // End of variables declaration//GEN-END:variables
}
